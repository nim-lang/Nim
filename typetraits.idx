nimTitle	typetraits	typetraits.html	module std/typetraits		0
nim	HoleyEnum	typetraits.html#HoleyEnum	type HoleyEnum		22
nim	OrdinalEnum	typetraits.html#OrdinalEnum	type OrdinalEnum		23
nim	name	typetraits.html#name,typedesc	proc name(t: typedesc): string		37
nim	arity	typetraits.html#arity,typedesc	proc arity(t: typedesc): int		45
nim	genericHead	typetraits.html#genericHead,typedesc	proc genericHead(t: typedesc): typedesc		54
nim	stripGenericParams	typetraits.html#stripGenericParams,typedesc	proc stripGenericParams(t: typedesc): typedesc		84
nim	supportsCopyMem	typetraits.html#supportsCopyMem,typedesc	proc supportsCopyMem(t: typedesc): bool		94
nim	hasDefaultValue	typetraits.html#hasDefaultValue,typedesc	proc hasDefaultValue(t: typedesc): bool		99
nim	isNamedTuple	typetraits.html#isNamedTuple,typedesc	proc isNamedTuple(T: typedesc): bool		116
nim	pointerBase	typetraits.html#pointerBase.t,typedesc[]	template pointerBase[T](_: typedesc[ptr T | ref T]): typedesc		123
nim	rangeBase	typetraits.html#rangeBase,typedesc[range]	proc rangeBase(T: typedesc[range]): typedesc		133
nim	rangeBase	typetraits.html#rangeBase.t,T	template rangeBase[T: range](a: T): untyped		146
nim	distinctBase	typetraits.html#distinctBase,typedesc,staticbool	proc distinctBase(T: typedesc; recursive: static bool = true): typedesc		167
nim	distinctBase	typetraits.html#distinctBase.t,T,staticbool	template distinctBase[T](a: T; recursive: static bool = true): untyped		182
nim	tupleLen	typetraits.html#tupleLen,typedesc[]	proc tupleLen(T: typedesc[tuple]): int		196
nim	tupleLen	typetraits.html#tupleLen.t	template tupleLen(t: tuple): int		205
nim	get	typetraits.html#get.t,typedesc[],staticint	template get(T: typedesc[tuple]; i: static int): untyped		215
nim	StaticParam	typetraits.html#StaticParam	object StaticParam		223
nim	elementType	typetraits.html#elementType.t,untyped	template elementType(a: untyped): typedesc		227
nim	enumLen	typetraits.html#enumLen.m,typedesc[]	macro enumLen(T: typedesc[enum]): int		243
nim	genericParams	typetraits.html#genericParams.t,typedesc	template genericParams(T: typedesc): untyped		313
nim	hasClosure	typetraits.html#hasClosure,NimNode	proc hasClosure(fn: NimNode): bool		341
nim	toUnsigned	typetraits.html#toUnsigned.t,typedesc[]	template toUnsigned(T: typedesc[SomeInteger and not range]): untyped		349
nim	toSigned	typetraits.html#toSigned.t,typedesc[]	template toSigned(T: typedesc[SomeInteger and not range]): untyped		364
idx	copyMem	typetraits.html#copymem_1	Module typetraits		0
idx	blob	typetraits.html#blob_1	Module typetraits		0
